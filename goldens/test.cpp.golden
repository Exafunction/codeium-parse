Name: bar
Definition (definition.namespace):
namespace bar {
// Declaration.
bool baz(const std::string& bing);

struct Foo2;

}

Name: baz
Parameters: (const std::string& bing)
Return type: bool
Doc:
// Declaration.
Declaration (definition.function):
bool baz(const std::string& bing);
Lineage: [bar]
Lineage types: [namespace]

Name: bar2
Definition (definition.namespace):
namespace bar::bar2 {
struct Foo3;
}
Lineage: [bar]
Lineage types: [namespace]

Name: Foo
Definition (definition.class):
class Foo {
 public:
  // foo
  // foo2
  void foo() {
    // Do nothing.
  }
}

Name: foo
Parameters: ()
Return type: void
Doc:
// foo
// foo2
Definition (definition.function):
void foo() {
    // Do nothing.
  }
Lineage: [Foo]
Lineage types: [class]

Name: Foo2
Definition (definition.class):
struct bar::Foo2 {}
Lineage: [bar]
Lineage types: [unknown]

Name: Foo3
Definition (definition.class):
struct bar::bar2::Foo3 {}
Lineage: [bar bar2]
Lineage types: [unknown unknown]

Name: baz
Parameters: (const std::string& bing)
Return type: bool
Doc:
// baz
Definition (definition.function):
bool bar::baz(const std::string& bing) {
  // This shouldn't be recognized as a function.
  Foo dist();
  return bing.empty();
}
Lineage: [bar]
Lineage types: [unknown]

Name: one_pointer
Parameters: ()
Return type: bool*
Doc:
// one_pointer comment
Definition (definition.function):
bool* one_pointer() { return nullptr; }

Name: two_pointer
Parameters: ()
Return type: bool**
Doc:
// two_pointer comment
Definition (definition.function):
bool** two_pointer() { return nullptr; }

Name: TemplatedFoo
Doc:
// Comment.
Definition (definition.class):
template <typename T>
class TemplatedFoo {
  template <typename U>
  void foo();
};

Name: foo
Parameters: ()
Return type: void
Declaration (definition.function):
template <typename U>
  void foo();
Lineage: [TemplatedFoo]
Lineage types: [class]

Name: foo
Parameters: ()
Return type: void
Doc:
// Comment.
Definition (definition.function):
template <typename T>
template <typename U>
void TemplatedFoo<T>::foo() {}
Lineage: [TemplatedFoo<T>]
Lineage types: [unknown]

Name: foo<int>
Parameters: ()
Return type: void
Doc:
// Comment.
Definition (definition.function):
template <>
template <>
void TemplatedFoo<int>::foo<int>() {}
Lineage: [TemplatedFoo<int>]
Lineage types: [unknown]

Name: TemplatedFoo2<int>
Doc:
// Comment.
Definition (definition.class):
template <>
class TemplatedFoo2<int> {};
