Name: require
Definition (definition.import):
require "net/http"

Name: SomeClass
Doc:
# This is just your standard class
#  nothing strange here
Declaration (definition.class):
class SomeClass
  # In ruby, the parentheses can be omitted in many circumstances
  # This is probably a job for the AST, but we'll add a test here anyway
  def empty_parens()
    "Nice"
  end
end

Name: empty_parens
Parameters: ()
Definition (definition.method):
def empty_parens()
    "Nice"
  end
Lineage: [SomeClass]
Lineage types: [class]

Name: SomeModule
Definition (definition.module):
module SomeModule
  def omitted_parens
    :foo
  end
end

Name: Test
Definition (definition.module):
module Test ; end

Name: SubTest
Definition (definition.module):
module Test::SubTest
  # We're inheriting from SomeClass here
  class MyClass < SomeClass
    include SomeModule

    # Some languages would call this a "static" method
    def self.in_eigenclass
      new.simple
    end

    class << self
      # In all ways, this method behaves the same as `in_eigenclass`
      def in_reopened_eigenclass
        new.optional_param(true)
      end
    end

    def simple
      self
    end

    def unparenthesized arg1, arg2
      arg2, arg1 = arg1, arg2
    end

    def optional_param(arg1, arg2 = "fine")
      nil
    end

    def splatted_args(arg1, *args)
    end
  end
end

Name: MyClass
Declaration (definition.class):
class MyClass < SomeClass
    include SomeModule

    # Some languages would call this a "static" method
    def self.in_eigenclass
      new.simple
    end

    class << self
      # In all ways, this method behaves the same as `in_eigenclass`
      def in_reopened_eigenclass
        new.optional_param(true)
      end
    end

    def simple
      self
    end

    def unparenthesized arg1, arg2
      arg2, arg1 = arg1, arg2
    end

    def optional_param(arg1, arg2 = "fine")
      nil
    end

    def splatted_args(arg1, *args)
    end
  end
Lineage: [SubTest]
Lineage types: [module]

Name: include
Reference (reference.call):
include SomeModule

Name: simple
Reference (reference.call):
new.simple

Name: optional_param
Reference (reference.call):
new.optional_param(true)

Name: unparenthesized
Parameters: arg1, arg2
Definition (definition.method):
def unparenthesized arg1, arg2
      arg2, arg1 = arg1, arg2
    end
Lineage: [SubTest MyClass]
Lineage types: [module class]

Name: optional_param
Parameters: (arg1, arg2 = "fine")
Definition (definition.method):
def optional_param(arg1, arg2 = "fine")
      nil
    end
Lineage: [SubTest MyClass]
Lineage types: [module class]

Name: SubSubTest
Definition (definition.module):
module Test::SubTest::SubSubTest
  module SubSubSubTest
    extend SomeModule
  end

end

Name: SubSubSubTest
Definition (definition.module):
module SubSubSubTest
    extend SomeModule
  end
Lineage: [SubSubTest]
Lineage types: [module]

Name: extend
Reference (reference.call):
extend SomeModule

Name: MyTerribleMethod
Reference (reference.call):
MyTerribleMethod()

Name: new
Reference (reference.call):
Test::SubTest::MyClass.new

Name: splatted_args
Reference (reference.call):
Test::SubTest::MyClass.new.splatted_args 1, 2, 3

Name: in_reopened_eigenclass
Reference (reference.call):
Test::SubTest::MyClass.in_reopened_eigenclass

Name: omitted_parens
Reference (reference.call):
Test::SubTest::SubSubTest::SubSubSubTest.omitted_parens
