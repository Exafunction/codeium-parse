Name: require
Reference (reference.call):
require "net/http"

Name: SomeClass
Doc:
# This is just your standard class
#  nothing strange here
Declaration (definition.class):
class SomeClass
  # In ruby, the parentheses can be omitted in many circumstances
  # This is probably a job for the AST, but we'll add a test here anyway
  def empty_parens()
    "Nice"
  end
end

Name: SomeClass
Reference (reference.call):
SomeClass

Name: empty_parens
Reference (reference.call):
empty_parens

Name: empty_parens
Parameters: ()
Definition (definition.method):
def empty_parens()
    "Nice"
  end
Lineage: [SomeClass]
Lineage types: [class]

Name: SomeModule
Definition (definition.module):
module SomeModule
  def omitted_parens
    :foo
  end
end

Name: SomeModule
Reference (reference.call):
SomeModule

Name: omitted_parens
Reference (reference.call):
omitted_parens

Name: Test
Reference (reference.call):
Test

Name: SubTest
Definition (definition.module):
module Test::SubTest
  # We're inheriting from SomeClass here
  class MyClass < SomeClass
    include SomeModule

    # Some languages would call this a "static" method
    def self.in_eigenclass
      new.foo
    end

    class << self
      # In all ways, this method behaves the same as `in_eigenclass`
      def in_reopened_eigenclass
        new.bar(true)
      end
    end

    def simple
      self
    end

    def optional_param(arg1, arg2 = "fine")
      nil
    end

    def splatted_args(arg1, *args)
    end
  end
end

Name: SubTest
Reference (reference.call):
SubTest

Name: MyClass
Declaration (definition.class):
class MyClass < SomeClass
    include SomeModule

    # Some languages would call this a "static" method
    def self.in_eigenclass
      new.foo
    end

    class << self
      # In all ways, this method behaves the same as `in_eigenclass`
      def in_reopened_eigenclass
        new.bar(true)
      end
    end

    def simple
      self
    end

    def optional_param(arg1, arg2 = "fine")
      nil
    end

    def splatted_args(arg1, *args)
    end
  end
Lineage: [SubTest]
Lineage types: [module]

Name: MyClass
Reference (reference.call):
MyClass

Name: SomeClass
Reference (reference.call):
SomeClass

Name: include
Reference (reference.call):
include SomeModule

Name: include
Reference (reference.call):
include

Name: SomeModule
Reference (reference.call):
SomeModule

Name: in_eigenclass
Reference (reference.call):
in_eigenclass

Name: new
Reference (reference.call):
new

Name: foo
Reference (reference.call):
new.foo

Name: foo
Reference (reference.call):
foo

Name: in_reopened_eigenclass
Reference (reference.call):
in_reopened_eigenclass

Name: new
Reference (reference.call):
new

Name: bar
Reference (reference.call):
new.bar(true)

Name: bar
Reference (reference.call):
bar

Name: simple
Reference (reference.call):
simple

Name: optional_param
Reference (reference.call):
optional_param

Name: arg1
Reference (reference.call):
arg1

Name: arg2
Reference (reference.call):
arg2

Name: optional_param
Parameters: (arg1, arg2 = "fine")
Definition (definition.method):
def optional_param(arg1, arg2 = "fine")
      nil
    end
Lineage: [SubTest MyClass]
Lineage types: [module class]

Name: splatted_args
Reference (reference.call):
splatted_args

Name: arg1
Reference (reference.call):
arg1

Name: args
Reference (reference.call):
args

Name: Test
Reference (reference.call):
Test

Name: SubTest
Reference (reference.call):
SubTest

Name: SubSubTest
Definition (definition.module):
module Test::SubTest::SubSubTest
  module SubSubSubTest
    extend Foo
  end
end

Name: SubSubTest
Reference (reference.call):
SubSubTest

Name: SubSubSubTest
Definition (definition.module):
module SubSubSubTest
    extend Foo
  end
Lineage: [SubSubTest]
Lineage types: [module]

Name: SubSubSubTest
Reference (reference.call):
SubSubSubTest

Name: extend
Reference (reference.call):
extend Foo

Name: extend
Reference (reference.call):
extend

Name: Foo
Reference (reference.call):
Foo
